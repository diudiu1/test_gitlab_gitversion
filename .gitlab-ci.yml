stages:
  - test
  - gitversion
  - build
  - pushfile
  - release


workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG'
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always

test-code-unit:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  stage: test
  script:
    - echo "单元测试"
    - cd testsln/TestApi.UnitTest
    - dotnet test

test-code-functional:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  stage: test
  script:
    - echo "功能测试"
    - cd testsln/TestApi.FunctionalTest
    - dotnet test

gitversion_function:
  image: 
    name: gittools/gitversion
    entrypoint: [""]
  stage: gitversion    
  variables:
    GIT_STRATEGY: none
  script:
    - | 
      echo $CI_REPOSITORY_URL
      echo $CI_COMMIT_REF_NAME
      echo $CI_PROJECT_DIR
      echo $CI_COMMIT_SHA
      echo $VERBOSITYSETTING

      git clone --filter=blob:none --no-checkout $CI_REPOSITORY_URL $CI_PROJECT_DIR
      git checkout $CI_COMMIT_SHA GitVersion.yml || true
      
      
      /tools/dotnet-gitversion /url $CI_REPOSITORY_URL /b $CI_COMMIT_REF_NAME /c $CI_COMMIT_SHA /dynamicRepoLocation $CI_PROJECT_DIR $VERBOSITYSETTING | tee thisversion.json

      for keyval in $( grep -E '": [^\{]' thisversion.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
        echo "export $keyval"
        eval export $keyval
      done

      echo "Exporting some of these to dotenv files for variable usage in the pipeline and subsequent jobs..."
      echo "SemVer=${SemVer}" >> thisversion.env
      echo "PACKAGE_VERSION=${LegacySemVer}" >> thisversion.env
      echo "LegacySemVer=${LegacySemVer}" >> thisversion.env
      echo "InformationalVersion=${InformationalVersion}" >> thisversion.env
      echo "Major=${Major}" >> thisversion.env
      echo "Minor=${Minor}" >> thisversion.env
      echo "Patch=${Patch}" >> thisversion.env
      echo "MajorMinorPatch=${MajorMinorPatch}" >> thisversion.env
      echo "NuGetVersionV2=${NuGetVersionV2}" >> thisversion.env
  artifacts:
    reports:
      #propagates variables into the pipeline level
      dotenv: thisversion.env   



build-code-job:
  image: docker:latest
  stage: build
  script:
    - cd testsln
    - echo $PACKAGE_VERSION
    - docker build -f TestApi/Dockerfile -t test.api:$PACKAGE_VERSION .
    
    - echo "推送镜像到镜像仓库"
    #- docker push test.api:$PACKAGE_VERSION

generic_create_package:
  stage: pushfile
  image: bash:latest
  script:
    - |
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi    
      printenv
      sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
      apk update
      apk add curl
      echo "Creating something to put in the package..."
      echo "${PACKAGE_VERSION}" > version.txt
      echo "version.txt" > includefiles.lst
      tar -czvf ${CI_PROJECT_NAME}.${PACKAGE_VERSION}.tar.gz -T includefiles.lst
      if [[ $CI_COMMIT_REF_PROTECTED == "false" ]]; then
        echo "To prevent clutter, packages are not pushed or download tested unless the branch is protected - they are available in job artifacts for inspection."
      else
        echo "Pushing package to registry."  
        curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${CI_PROJECT_NAME}.${PACKAGE_VERSION}.tar.gz ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${PACKAGE_VERSION}/${CI_PROJECT_NAME}.${PACKAGE_VERSION}.tar.gz
      fi
  artifacts:
    paths:
      - '*.tar.gz'

do_gitlab_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED != "false"'
      #This last rule will do a release for any protected branch. Literal branch names can be used if desired.

  script:
    - > 
      release-cli create --name ${PACKAGE_VERSION} --description $CI_COMMIT_REF_NAME-$CI_JOB_ID
      --tag-name ${PACKAGE_VERSION} --ref $CI_COMMIT_SHA
      --assets-link "{\"name\":\"Packaged Artifact\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${PACKAGE_VERSION}/${CI_PROJECT_NAME}.${PACKAGE_VERSION}.tar.gz\"}"